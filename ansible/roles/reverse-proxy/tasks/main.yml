---
- name: Install dependencies
  apt:
    name: "{{ caddy_dependencies }}"
    state: present
    update_cache: true
  become: true

- name: Check if Caddy is already installed
  stat:
    path: "{{ caddy_binary_path }}"
  register: caddy_binary_stat

- name: Check Caddy version and plugins
  shell: "{{ caddy_binary_path }} list-modules"
  register: caddy_modules
  changed_when: false
  failed_when: false
  become: true
  when: caddy_binary_stat.stat.exists

- name: Determine if Caddy needs to be built
  set_fact:
    caddy_needs_build: >-
      {{
        not caddy_binary_stat.stat.exists or
        caddy_modules.rc != 0 or
        caddy_plugins | map('regex_replace', '^github.com/(.+)$', 'dns.\1') |
        reject('in', caddy_modules.stdout | default('')) | list | length > 0
      }}

- name: Check if xcaddy is installed
  stat:
    path: "{{ go_bin_path }}/xcaddy"
  register: xcaddy_stat
  when: caddy_needs_build

- name: Install xcaddy
  shell: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
  environment:
    GOPATH: "{{ go_install_path }}"
    GOBIN: "{{ go_bin_path }}"
  become: true
  when: caddy_needs_build and not xcaddy_stat.stat.exists

- name: Build Caddy with plugins
  shell: "{{ go_bin_path }}/xcaddy build --with {{ caddy_plugins | join(' --with ') }}"
  args:
    chdir: /tmp
  environment:
    GOPATH: "{{ go_install_path }}"
  become: true
  when: caddy_needs_build
  register: caddy_build

- name: Install custom Caddy binary
  copy:
    src: /tmp/caddy
    dest: "{{ caddy_binary_path }}"
    mode: "0755"
    owner: root
    group: root
    remote_src: true
  become: true
  when: caddy_needs_build and caddy_build is succeeded
  register: caddy_binary_installed

- name: Create caddy user
  user:
    name: "{{ caddy_user }}"
    system: true
    shell: /usr/sbin/nologin
    home: "{{ caddy_home }}"
    create_home: true
  become: true

- name: Create Caddy systemd service
  copy:
    content: |
      [Unit]
      Description=Caddy
      Documentation=https://caddyserver.com/docs/
      After=network.target network-online.target
      Requires=network-online.target

      [Service]
      Type=notify
      User={{ caddy_user }}
      Group={{ caddy_group }}
      ExecStart={{ caddy_binary_path }} run --environ --config {{ caddy_config_dir }}/Caddyfile
      ExecReload={{ caddy_binary_path }} reload --config {{ caddy_config_dir }}/Caddyfile --force
      TimeoutStopSec={{ caddy_timeout_stop_sec }}
      LimitNOFILE={{ caddy_limit_nofile }}
      LimitNPROC={{ caddy_limit_nproc }}
      PrivateTmp=true
      ProtectSystem=full
      AmbientCapabilities=CAP_NET_BIND_SERVICE

      [Install]
      WantedBy=multi-user.target
    dest: "{{ caddy_systemd_service }}"
    mode: "0644"
  become: true
  register: systemd_service_changed

- name: Create Caddy config directory
  file:
    path: "{{ caddy_config_dir }}"
    state: directory
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: "0755"
  become: true

- name: Reload systemd daemon
  systemd:
    daemon_reload: true
  become: true
  when: systemd_service_changed.changed

- name: Create Caddyfile
  copy:
    content: |
      (cloudflare) {
        tls {
          dns cloudflare {{ lookup('amazon.aws.aws_ssm', cloudflare_api_token_secret_name) }}
        }
      }

      {{ reverse_proxy_domain }} {
        reverse_proxy {{ reverse_proxy_backend }} {
          transport http {
            {% if reverse_proxy_tls_insecure %}
            tls_insecure_skip_verify
            {% endif %}
          }
        }
        import cloudflare
      }
    dest: "{{ caddy_config_dir }}/Caddyfile"
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: "0644"
  become: true
  register: caddyfile_changed

- name: Start and enable Caddy
  systemd:
    name: caddy
    state: started
    enabled: true
  become: true

- name: Restart Caddy if needed
  systemd:
    name: caddy
    state: restarted
  become: true
  when: >
    caddyfile_changed.changed or
    systemd_service_changed.changed or
    (caddy_binary_installed is defined and caddy_binary_installed.changed)
